Versions:
|  |
now - First trial; 5kpc 
1.1 - Initial test; 5kpc; X_H2_bar(M, n_H_mean)
1.2 - Multiplied X_H2_bar with 2 inside the code; 5kpc; X_H2_bar(M, n_H_mean), X_CO_bar(M, n_H_mean)
1.3 - X_H2_bar(M, n_H_mean), X_CO_bar(M, n_H_mean); 15kpc
1.4 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc
1.5 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 15kpc
1.6 - X_H2_bar(M, n_H_mean), X_CO_bar(M, n_H_mean); 5kpc - corrected formula for n_LW, n_LW_ss, n_CO to include (Z/0.02)
1.7 - X_H2_bar(M, n_H_mean), X_CO_bar(M, n_H_mean); 15kpc - corrected formula for n_LW, n_LW_ss, n_CO to include (Z/0.02)
1.8 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - corrected formula for n_LW, n_LW_ss, n_CO to include (Z/0.02)
1.9 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 15kpc - corrected formula for n_LW, n_LW_ss, n_CO to include (Z/0.02)
2.0 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - units of Z correction
2.1 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - units of Z correction again (testing)
2.2 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - units of Z correction(testing-2.0) + n_LW_ss = no Z
2.3 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - units of Z correction(testing-2.1) + n_LW_ss = no Z

2.4 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - Z = Z_solar = Z_sim/0.02; kappa = 1000*m_p*Z
2.5 - X_H2_bar(M, n_H_mean, Z), X_CO_bar(M, n_H_mean, Z); 5kpc - Z = Z_mf = Z_sim; kappa = 1000*m_p*(Z/0.02)
2.6 - 15kpc of 2.4
2.7 - 15kpc of 2.5

2.8 - 5kpc; Z = Z_solar = Z_sim/0.02; kappa = 1000*m_p*Z; declaring all variables outside inside_loop()
2.9 - 5kpc; Z = Z_solar = Z_sim/0.02; kappa = 1000*m_p*Z; declaring all variables inside inside_loop()
3.0 - 2.8 + c_s = sqrt(K_b*T_mean/m_p); T_mean instead of T
3.1 - 2.9 + c_s = sqrt(K_b*T_mean/m_p); T_mean instead of T
3.2 - 2.8 + c_s = sqrt(gamma*P/rho)
3.3 - 2.9 + c_s = sqrt(gamma*P/rho)
3.4 - Trying to plot (unsuccessfully) X_H2 vs n_H; time runs out; 5kpc
3.5 - Introduced constraints on formation of HII by introducing constraints on formation of HI by introducing constraints on temperature and n_H_mean (X_H2 = X_CO = 0 when T>=1e4K or n_H_mean<=1e-2[H]/cc ); 5kpc; Z_arr = Z_sim/0.02 = Solar units
3.6 - 15 kpc version of 3.5
3.7 - 15 kpc with 3.5 constraints; Z_arr = Z_sim = Mass fraction units
3.8 - 5kpc; Z=solar; mach = turb/c_s(T_simulation); lambda_jeans ~ c_s(T_mean=10K)/sqrt(n_H); same constraints as 3.5
3.9 - mach=10(fixed);lambda_jeans ~ c_s(T_mean=10K)/sqrt(n_H); same constraints as 3.5; Z_arr = Z_sim/0.02 = Solar units
4.0 - 15kpc of 3.8

sub_grid - just for the sub_grid model, and to save X_H2, X_CO, n_CO, lambda_jeans arrays to use in rad_transf code later. Values            from simulation are not used here, this is purely theoretical.
michaels_version - the full version of 4.0 that Michael modified to make it more streamlined, still takes ~5 hours to run, same              outputs
parallel_code - modified version of 4.0 that Michael modified to run on 16cpus parallely instead of 1cpu, it now takes ~4mins                instead of the previous ~5hours. The job script is also included, and the command to run this job+script is : 
           sbatch job_python_parallel_code xh2_parr.py

reference_plots_1.0 - 5kpc ; for Z = Z_solar = Z_sim/0.02; kappa = 1000*m_p*Z --> SOLAR UNITS
reference_plots_1.1 - 5kpc ; for Z = Z_mf = Z_sim; kappa = 1000*m_p*(Z/0.02) --> MASS FRACTION UNITS